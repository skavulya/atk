
Consider the following model trained and tested on the sample data set in *frame* 'frame'.
The frame has a snippet of air quality data from:

https://archive.ics.uci.edu/ml/datasets/Air+Quality.

Lichman, M. (2013). UCI Machine Learning Repository [http://archive.ics.uci.edu/ml].
Irvine, CA: University of California, School of Information and Computer Science.

<hide>
>>> import trustedanalytics as ta
>>> ta.connect()
-etc-
>>> schema = [("Date", str),
...           ("Time",str),
...           ("CO_GT", ta.float32),
...           ("PT08_S1_CO", ta.int32),
...           ("NMHC_GT", ta.int32),
...           ("C6H6_GT", ta.float32),
...           ("PT08_S2_NMHC", ta.int32),
...           ("NOx_GT",ta.int32),
...           ("PT08_S3_NOx",ta.int32),
...           ("NO2_GT", ta.int32),
...           ("PT08_S4_NO2",ta.int32),
...           ("PT08_S5_O3", ta.int32),
...           ("Temp", ta.float32),
...           ("RH", ta.float32),
...           ("AH", ta.float32)]
>>> data = [["10/03/2004","18.00.00",2.6,1360,150,11.9,1046,166,1056,113,1692,1268,13.6,48.9,0.7578],
...         ["10/03/2004","19.00.00",2,1292,112,9.4,955,103,1174,92,1559,972,13.3,47.7,0.7255],
...         ["10/03/2004","20.00.00",2.2,1402,88,9.0,939,131,1140,114,1555,1074,11.9,54.0,0.7502],
...         ["10/03/2004","21.00.00",2.2,1376,80,9.2,948,172,1092,122,1584,1203,11.0,60.0,0.7867],
...         ["10/03/2004","22.00.00",1.6,1272,51,6.5,836,131,1205,116,1490,1110,11.2,59.6,0.7888],
...         ["10/03/2004","23.00.00",1.2,1197,38,4.7,750,89,1337,96,1393,949,11.2,59.2,0.7848],
...         ["11/03/2004","00.00.00",1.2,1185,31,3.6,690,62,1462,77,1333,733,11.3,56.8,0.7603],
...         ["11/03/2004","01.00.00",1,1136,31,3.3,672,62,1453,76,1333,730,10.7,60.0,0.7702],
...         ["11/03/2004","02.00.00",0.9,1094,24,2.3,609,45,1579,60,1276,620,10.7,59.7,0.7648],
...         ["11/03/2004","03.00.00",0.6,1010,19,1.7,561,-200,1705,-200,1235,501,10.3,60.2,0.7517],
...         ["11/03/2004","04.00.00",-200,1011,14,1.3,527,21,1818,34,1197,445,10.1,60.5,0.7465],
...         ["11/03/2004","05.00.00",0.7,1066,8,1.1,512,16,1918,28,1182,422,11.0,56.2,0.7366],
...         ["11/03/2004","06.00.00",0.7,1052,16,1.6,553,34,1738,48,1221,472,10.5,58.1,0.7353],
...         ["11/03/2004","07.00.00",1.1,1144,29,3.2,667,98,1490,82,1339,730,10.2,59.6,0.7417],
...         ["11/03/2004","08.00.00",2,1333,64,8.0,900,174,1136,112,1517,1102,10.8,57.4,0.7408],
...         ["11/03/2004","09.00.00",2.2,1351,87,9.5,960,129,1079,101,1583,1028,10.5,60.6,0.7691],
...         ["11/03/2004","10.00.00",1.7,1233,77,6.3,827,112,1218,98,1446,860,10.8,58.4,0.7552],
...         ["11/03/2004","11.00.00",1.5,1179,43,5.0,762,95,1328,92,1362,671,10.5,57.9,0.7352],
...         ["11/03/2004","12.00.00",1.6,1236,61,5.2,774,104,1301,95,1401,664,9.5,66.8,0.7951],
...         ["11/03/2004","13.00.00",1.9,1286,63,7.3,869,146,1162,112,1537,799,8.3,76.4,0.8393],
...         ["11/03/2004","14.00.00",2.9,1371,164,11.5,1034,207,983,128,1730,1037,8.0,81.1,0.8736],
...         ["11/03/2004","15.00.00",2.2,1310,79,8.8,933,184,1082,126,1647,946,8.3,79.8,0.8778],
...         ["11/03/2004","16.00.00",2.2,1292,95,8.3,912,193,1103,131,1591,957,9.7,71.2,0.8569],
...         ["11/03/2004","17.00.00",2.9,1383,150,11.2,1020,243,1008,135,1719,1104,9.8,67.6,0.8185]]
>>> frame = ta.Frame(ta.UploadRows(data,schema=schema))
-etc-

</hide>

>>> frame.inspect()
[#]  Date        Time      CO_GT           PT08_S1_CO  NMHC_GT  C6H6_GT
=============================================================================
[0]  10/03/2004  18.00.00   2.59999990463        1360      150  11.8999996185
[1]  10/03/2004  19.00.00             2.0        1292      112  9.39999961853
[2]  10/03/2004  20.00.00   2.20000004768        1402       88            9.0
[3]  10/03/2004  21.00.00   2.20000004768        1376       80  9.19999980927
[4]  10/03/2004  22.00.00   1.60000002384        1272       51            6.5
[5]  10/03/2004  23.00.00   1.20000004768        1197       38  4.69999980927
[6]  11/03/2004  00.00.00   1.20000004768        1185       31  3.59999990463
[7]  11/03/2004  01.00.00             1.0        1136       31  3.29999995232
[8]  11/03/2004  02.00.00  0.899999976158        1094       24  2.29999995232
[9]  11/03/2004  03.00.00  0.600000023842        1010       19  1.70000004768
<BLANKLINE>
[#]  PT08_S2_NMHC  NOx_GT  PT08_S3_NOx  NO2_GT  PT08_S4_NO2  PT08_S5_O3
=======================================================================
[0]          1046     166         1056     113         1692        1268
[1]           955     103         1174      92         1559         972
[2]           939     131         1140     114         1555        1074
[3]           948     172         1092     122         1584        1203
[4]           836     131         1205     116         1490        1110
[5]           750      89         1337      96         1393         949
[6]           690      62         1462      77         1333         733
[7]           672      62         1453      76         1333         730
[8]           609      45         1579      60         1276         620
[9]           561    -200         1705    -200         1235         501
<BLANKLINE>
[#]  Temp           RH             AH
=================================================
[0]  13.6000003815  48.9000015259  0.757799983025
[1]  13.3000001907  47.7000007629  0.725499987602
[2]  11.8999996185           54.0  0.750199973583
[3]           11.0           60.0    0.7867000103
[4]  11.1999998093  59.5999984741  0.788800001144
[5]  11.1999998093  59.2000007629  0.784799993038
[6]  11.3000001907  56.7999992371   0.76029998064
[7]  10.6999998093           60.0  0.770200014114
[8]  10.6999998093  59.7000007629  0.764800012112
[9]  10.3000001907  60.2000007629  0.751699984074

>>> model = ta.ArxModel()
<progress>

We will be using the column "Temp" (temperature in Celsius) as our time series value:

>>> y_column = "Temp"

The sensor values will be used as our exogenous variables:

>>> x_columns = ['CO_GT','PT08_S1_CO','NMHC_GT','C6H6_GT','PT08_S2_NMHC','NOx_GT','PT08_S3_NOx','NO2_GT','PT08_S4_NO2','PT08_S5_O3']

>>> train_output = model.train(frame, y_column, x_columns, 0, 0, True)
<progress>

>>> train_output
{u'c': 0.0,
 u'coefficients': [0.005567992923907625,
  -0.010969068059453009,
  0.012556586798371176,
  -0.39792503380811506,
  0.04289162879826746,
  -0.012253952164677924,
  0.01192148525581035,
  0.014100699808650077,
  -0.021091473795935345,
  0.007622676727420039]}

>>> predicted_frame = model.predict(frame, y_column, x_columns)
<progress>

>>> predicted_frame.column_names
[u'Date',
 u'Time',
 u'CO_GT',
 u'PT08_S1_CO',
 u'NMHC_GT',
 u'C6H6_GT',
 u'PT08_S2_NMHC',
 u'NOx_GT',
 u'PT08_S3_NOx',
 u'NO2_GT',
 u'PT08_S4_NO2',
 u'PT08_S5_O3',
 u'Temp',
 u'RH',
 u'AH',
 u'predicted_y']

>>> predicted_frame.inspect(columns=("Temp","predicted_y"))
[#]  Temp           predicted_y
=================================
[0]  13.6000003815   13.236459938
[1]  13.3000001907  13.0250130899
[2]  11.8999996185  11.4147282294
[3]           11.0  11.3157457822
[4]  11.1999998093  11.3982074883
[5]  11.1999998093  11.7079198051
[6]  11.3000001907  10.7879916472
[7]  10.6999998093   10.527428478
[8]  10.6999998093  10.4439615476
[9]  10.3000001907   10.276662138

>>> model.publish()
<progress>

Take the path to the published model and run it in the Scoring Engine:

<skip>
>>> import requests
>>> headers = {'Content-type': 'application/json', 'Accept': 'application/json,text/plain'}
</skip>

Post a request to get the metadata about the model

<skip>
>>> r = requests.get('http://mymodel.demotrustedanalytics.com/v2/metadata')
>>> r.text
u'{"model_details":{"model_type":"ARX Model","model_class":"com.cloudera.sparkts.models.ARXModel","model_reader":"org.trustedanalytics.atk.scoring.models.ARXModelReaderPlugin","custom_values":{}},"input":[{"name":"y","value":"Array[Double]"},{"name":"x_values","value":"Array[Double]"}],"output":[{"name":"y","value":"Array[Double]"},{"name":"x_values","value":"Array[Double]"},{"name":"score","value":"Array[Double]"}]}'
</skip>

The ARX model only supports version 2 of the scoring engine.  In the following example, we are using the ARX model
that was trained and published in the example above.  To keep things simple, we just send the first three rows of
'y' values and the corresponding 'x_values'.

<skip>
>>> r = requests.post('http://mymodel.demotrustedanalytics.com/v2/score',json={"records":[{"y":[13.6000003815,13.3000001907,11.8999996185],"x_values":[2.6,2.0,2.2,1360,1292,1402,150,112,88,11.9,9.4,9.0,1046,955,939,166,103,131,1056,1174,1140,113,92,114,1692,1559,1555,1268,972,1074]}]})
</skip>

The 'score' value contains an array of predicted y values.

<skip>
>>> r.text
u'{"data":[{"y":[13.6000003815,13.3000001907,11.8999996185],"x_values":[13.6000003815,13.3000001907,11.8999996185],"x_values":[2.6,2.0,2.2,1360,1292,1402,150,112,88,11.9,9.4,9.0,1046,955,939,166,103,131,1056,1174,1140,113,92,114,1692,1559,1555,1268,972,1074],"score":[13.2364599379956,13.02501308994565,11.414728229443007]}]}'
</skip>
